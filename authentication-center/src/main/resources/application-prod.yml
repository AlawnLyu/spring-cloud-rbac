server:
  port: 6100

spring:
  application:
    name: authentication-service
  zipkin:
    #链路数据收集并发送地址
    base-url: http://127.0.0.1:9100
  sleuth:
    sampler:
      #当前应用收集信息百分比
      percentage: 0.1
  #redis配置文件
  redis:
    host: 127.0.0.1
    port: 6379
    pool:
      max-idle: 20
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/csdndemo?characterEncoding=utf-8&useSSL=true&serverTimezone=GMT%2B8&nullNamePatternMatchesAll=true
    username: root
    password: gbsz123
    druid:
      initial-size: 5
      min-idle: 5
      max-active: 20
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,wall,log4j
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    type: com.alibaba.druid.pool.DruidDataSource

eureka:
  client:
    #注册中心地址
    service-url:
      defaultZone: http://lyu:123@127.0.0.1:2100/eureka/

jwt:
#  header: Authorization
  token:
    secret: d3Rvd25hcGk=
    expiration: 86400000
    issuer: lyu

ribbon:
  #设置通信的超时时间
  SocketTimeout: 250
  #因此在消费者的重试时间加起来的总和超过的话就直接连接超时
  #设置连接的超时时间
  ReadTimeout: 1000

RBAC-CONSUMER:
  ribbon:
    #请求连接的超时时间。
    ConnectTimeout: 250
    #请求处理的超时时间，该超时时间的影响层级大于全局的超时时间,设置了该时间那么，如果调用生产端的时候超过1秒那么就直接调用重试规则，因此若重试次数和切换次数都是为1那么，响应的时间不超过4秒
    ReadTimeout: 1000
    #对所有操作请求都进行重试
    OkToRetryOnAllOperations: true
    #以下重试实现响应EUREKA-PRODUCER的最大次数是 ：（1 + MaxAutoRetries）* （1 + MaxAutoRetriesNextServer）
    #假设 MaxAutoRetries = 2 ，MaxAutoRetriesNextServer = 4 ，那么最大的重试次数为15次
    #切换实例的重试次数。
    MaxAutoRetriesNextServer: 1
    #对当前实例的重试次数
    MaxAutoRetries: 1