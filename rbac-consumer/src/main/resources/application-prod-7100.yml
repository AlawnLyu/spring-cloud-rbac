server:
  port: 7100

spring:
  application:
    name: rbac-consumer
  zipkin:
    #链路数据收集并发送地址
    base-url: http://127.0.0.1:9100
  sleuth:
    #当前应用收集信息百分比
    sampler:
      percentage: 0.1
  cloud:
    #该参数用来开启重试机制，它默认是关闭的
    loadbalancer:
      retry:
        enabled: true

eureka:
  client:
    service-url:
      defaultZone: http://lyu:123@127.0.0.1:2100/eureka/

#设置全局的超时时间
ribbon:
  ReadTimeout: 1000

#开启GZIP的压缩功能以减少HTTP通信的消耗
#feign:
#  hystrix:
#    enabled: true
#  compression:
#    request:
#      enabled: true
#      #以下的请求的类型且请求数据的大小超过2048的将为会压缩传输
#      mime-types: text/xml,application/xml,application/json
#      min-request-size: 2048
#    response:
#      enabled: true

# 这里需要注意一点， Ribbon的超时与Hystrix的超时是两个概念。 为了让上述的重试机制实现有效，我们需要让Hystrix的超时时间大于Ribbon的超时时间， 否则Hystrix命令超时后，该命令直接熔断， 重试机制就 没有任何意义了。
# Hystrix的全局的超时时间
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 5000

RBAC-PRODUCE:
  ribbon:
    #请求连接的超时时间。
    ConnectTimeout: 250
    #请求处理的超时时间，该超时时间的影响层级大于全局的超时时间,设置了该时间那么，如果调用生产端的时候超过1秒那么就直接调用重试规则，因此若重试次数和切换次数都是为1那么，响应的时间不超过4秒
    ReadTimeout: 1000
    #对所有操作请求都进行重试
    OkToRetryOnAllOperations: true
    #以下重试实现响应EUREKA-PRODUCER的最大次数是 ：（1 + MaxAutoRetries）* （1 + MaxAutoRetriesNextServer）
    #假设 MaxAutoRetries = 2 ，MaxAutoRetriesNextServer = 4 ，那么最大的重试次数为15次
    #切换实例的重试次数。
    MaxAutoRetriesNextServer: 1
    #对当前实例的重试次数
    MaxAutoRetries: 1

logging:
  level:
    com.consumer.routeconsumer.service.RouteService: debug
